@page "/chat"
@using System.Security.Cryptography
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Secure Chat</h3>

<div>
    <input @bind="userName" placeholder="Your name" />
    <input @bind="message" placeholder="Type a message" />
    <button @onclick="Send">Send</button>
</div>

<div>
    @foreach (var msg in messages)
    {
        <p><strong>@msg.User (@msg.Timestamp):</strong> @msg.Content</p>
    }
</div>

@code {
    private string userName = "User1"; // In reality, this could be dynamic
    private string message = "";
    private List<Message> messages = new();
    private HubConnection hubConnection;

    private CryptoService cryptoService;

    protected override async Task OnInitializedAsync()
    {
        // Initialize CryptoService with a pre-shared key
        cryptoService = new CryptoService("mysecretkey123");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", async (user, encrypted, hmac) =>
        {
            try
            {
                string decrypted = cryptoService.Decrypt(encrypted, hmac);
                await InvokeAsync(() =>
                {
                    messages.Add(new Message { User = user, Content = decrypted, Timestamp = DateTime.Now });
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                await InvokeAsync(() =>
                {
                    messages.Add(new Message { User = "System", Content = $"Error: {ex.Message}", Timestamp = DateTime.Now });
                    StateHasChanged();
                });
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(message))
        {
            var (encrypted, hmac) = cryptoService.Encrypt(message);
            await hubConnection.SendAsync("SendMessage", userName, encrypted, hmac);
            message = "";
        }
    }
}